(require [net.cgrand.enlive-html :as html])
(require '[net.cgrand.enlive-html :as html])
(import '(java.net URL))
(defn fetch-url [url]
(html/html-resource (URL. url)))
(fetch-url "http://www.google.com")
(defn title [url]
(html/text (html/select (fetch-url url) [:title])))
(title "http://www.google.com")
(title "http://www.yahoo.com")
(def goog (fetch-url "http://www.google.com"))
(html/select goog [:title])
(def gtitle (html/select goog [:title]))
(gtitle)
gtitle
(html/text gtitle)
(html/content gtitle)
((html/content gtitle))
(:content gtitle)
gtitle
(apply #(:content %) gtitle)
(apply :content gtitle)
(defn title [url]
  (first (apply :content (html/select (fetch-url url) [:title]))))
(title "http://www.google.com")
(title "http://www.yahoo.com")
(title "https://github.com/cgrand/enlive")
(title "http://www.myclojureadventure.com/2011/05/parsing-web-pages-with-clojure-and.html")
(title "http://www.reddit.com/r/raspberry_pi/comments/1l6za2/using_rpis_as_thinclients_to_connect_to_a/")
(print (slurp "http://istruecryptauditedyet.com/"))
(title "http://www.youtube.com/watch?v=7Dqgr0wNyPo")
(use 'dev)
lein deps
(use 'clojure.java.jdbc)
(jdbc/create-table-ddl
   :links
   ["IF NOT EXISTS"]
   [:id "INT" "IDENTITY" "PRIMARY KEY"]
   [:title "VARCHAR"]
   [:url "VARCHAR(65535)"])
(create-table-ddl
   :links
   ["IF NOT EXISTS"]
   [:id "INT" "IDENTITY" "PRIMARY KEY"]
   [:title "VARCHAR"]
   [:url "VARCHAR(65535)"])
(str "hello" "world"
)
(drop-table-ddl :links)
(defmacro json-get
[f]
`(-> (fn [request]
  (try
    ~f
(require '[clojure.data.json :as json])
(json/write-str {:a "a" :b "b"})
(json/write-str {:title "Google" :url "http://www.google.com"})
(println (json/write-str {:title "Google" :url "http://www.google.com"}))
  (:require '[clojure.data.json :as json])
(json/write-str {:title "Google" :url "http://www.google.com" :escape-slash false)
(json/write-str {:title "Google" :url "http://www.google.com"} :escape-slash false)
(clojure.data.json/write-str {:title "Google" :url "http://www.google.com"} :escape-slash false)
  (require '[clojure.data.json :as json])
(json/write-str {:title "Google" :url "http://www.google.com"} :escape-slash false)
(println (json/write-str {:title "Google" :url "http://www.google.com"} :escape-slash false))
(str 1)
(println (json/write-str [1,2,3,4,5,"6"]))
  (require '[clojure.data.json :as json])
(println (json/write-str [1,2,3,4,5,"6"]))
(require 'com.sakekasi.linkshare.db)
(db/get-latest-link)
(com.sakekasi.linkshare.db/get-latest-link)
(require '[com.sakekasi.linkshare.db :as db])
(db/get-latest-link)
(db/put-link "Google" "http://www.google.com")
(db/get-latest-link)
(require '[com.sakekasi.linkshare.db :as db])
(db/get-latest-link)
(println (db/get-latest-link))
(nil? nil)
(not (nil? 2))
fn [_] (let [val (db/get-link id)]
                    (if (not (nil? val))
                      {::val val})))
((fn [] (let [val (db/get-link-id)] (if (not (nil? val)) {::val val}))))
((fn [] (let [val (db/get-latest-link)] (if (not (nil? val)) {::val val}))))
(some #{"a"} ["a" "b"])
(some #{"a" "b"} ["a" "b"])
(some #{"a" "b"} ["b"])
(map println {:title a :url b})
(map println {:title 1 :url 2})
(filter #(and (not (nil? (nth 1 %))) (not (= (first %) :id))) {:title "google" :url nil :id 5})
(map #(println (first %)) {:title 1 :url 2})
(map #(println (second %)) {:title 1 :url 2})
(filter #(and (not (nil? (second %))) (not (= (first %) :id))) {:title "google" :url nil :id 5})
(map (filter #(and (not (nil? (second %))) (not (= (first %) :id))) {:title "google" :url nil :id 5}))
(filter #(and (not (nil? (second %))) (not (= (first %) :id))) {:title "google" :url nil :id 5})
(reduce #(assoc %1 (first %2) (second %2)) {} (filter #(and (not (nil? (second %))) (not (= (first %) :id))) {:title "google" :url nil :id 5}))
(reduce (fn [a [b c]] (assoc a b c)) {} (filter #(and (not (nil? (second %))) (not (= (first %) :id))) {:title "google" :url nil :id 5}))
(use com.sakekasi.linkshare.repl
)
(use 'com.sakekasi.linkshare.repl)
(use 'repl)
(use 'com.sakekasi.linkshare.repl)
(start-server)
clear
(start-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
clear
(start-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(use 'com.sakekasi.linkshare.repl)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(stop-server)
(start-server)
(stop-server)
(start-server)
(stop-server)
(use 'com.sakekasi.linkshare.repl)
(start-server)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(use 'com.sakekasi.linkshare.db)
(init)
(length '())
(length [])
(alength [])
exit
